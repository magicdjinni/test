{% extends 'index.html.twig' %}

{% block title %}ðŸ“… Statistic by Date or Interval{% endblock %}

{% block body %}
    <div id="app" class="max-w-5xl mx-auto p-6">
        <h1 class="text-3xl font-bold mb-6 text-center">ðŸ“Š Movie Ticket Statistics</h1>

        <div class="flex space-x-4 mb-6">
            <button @click="tab = 'byDate'"
                    :class="tab === 'byDate' ? activeTabClass : inactiveTabClass">
                By Date
            </button>
            <button @click="tab = 'byInterval'"
                    :class="tab === 'byInterval' ? activeTabClass : inactiveTabClass">
                By Interval
            </button>
        </div>

        <div v-if="tab === 'byDate'" class="mb-6">
            <label class="block text-sm mb-1 font-medium">Select date:</label>
            <input type="date" v-model="selectedDate"
                   @change="fetchByDate"
                   class="border p-2 rounded w-full sm:w-64">
        </div>

        <div v-if="tab === 'byInterval'" class="mb-6">
            <div class="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0">
                <div class="flex-1">
                    <label class="block text-sm mb-1 font-medium">From:</label>
                    <input type="date" v-model="fromDate"
                           class="border p-2 rounded w-full">
                </div>
                <div class="flex-1">
                    <label class="block text-sm mb-1 font-medium">To:</label>
                    <input type="date" v-model="toDate"
                           class="border p-2 rounded w-full">
                </div>
            </div>
            <button @click="fetchByInterval"
                    class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
                Get Statistics
            </button>
        </div>

        <div v-if="loading" class="text-center text-gray-500">Loading...</div>

        <table v-if="results.length > 0"
               class="w-full mt-6 border-collapse border border-gray-300">
            <thead class="bg-gray-200">
            <tr>
                <th class="border border-gray-300 px-4 py-2 text-left">ðŸŽ¬ Movie Title</th>
                <th class="border border-gray-300 px-4 py-2 text-left">ðŸ“… Start Date</th>
                <th class="border border-gray-300 px-4 py-2 text-left">ðŸŽ« Tickets Sold</th>
                <th class="border border-gray-300 px-4 py-2 text-left">ðŸ’° Total Revenue</th>
            </tr>
            </thead>
            <tbody>
            <tr v-for="item in results" :key="item.title + item.startDate.date">
                <td class="border px-4 py-2">{{ '{{' }} item.title {{ '}}' }}</td>
                <td class="border px-4 py-2">{{ '{{' }} formatDate(item.startDate.date) {{ '}}' }}</td>
                <td class="border px-4 py-2">{{ '{{' }} item.ticketsSold {{ '}}' }}</td>
                <td class="border px-4 py-2">{{ '{{' }} item.totalSum {{ '}}' }} â‚´</td>
            </tr>
            </tbody>
        </table>

        <div v-else-if="!loading" class="text-center text-gray-500 mt-6">No data found.</div>
    </div>

    <script>
        const { createApp, ref, onMounted, computed } = Vue;

        createApp({
            setup() {
                const tab = ref('byDate');
                const selectedDate = ref(new Date().toISOString().slice(0, 10));
                const fromDate = ref('');
                const toDate = ref('');
                const results = ref([]);
                const loading = ref(false);
                const error = ref(null);

                const activeTabClass = "px-4 py-2 bg-blue-600 text-white rounded";
                const inactiveTabClass = "px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300";

                const formatDate = (dateStr) => new Date(dateStr).toLocaleString();

                const fetchByDate = async () => {
                    if (!selectedDate.value) return;
                    loading.value = true;
                    results.value = [];

                    const res = await fetch(`http://protonix.test/api/statistic/date/${selectedDate.value}`);
                    results.value = await res.json();
                    loading.value = false;
                };

                const fetchByInterval = async () => {
                    error.value = null;
                    try {
                        const res = await fetch(`/api/statistic/dates?from=${fromDate.value}&to=${toDate.value}`);
                        const json = await res.json();

                        if (!res.ok) {
                            throw new Error(json.error || 'Failed to load statistics');
                        }

                        results.value = json;
                    } catch (e) {
                        error.value = e.message;
                    } finally {
                        loading.value = false;
                    }
                };

                onMounted(() => {
                    fetchByDate();
                });

                return {
                    tab,
                    selectedDate,
                    fromDate,
                    toDate,
                    results,
                    loading,
                    fetchByDate,
                    fetchByInterval,
                    formatDate,
                    activeTabClass,
                    inactiveTabClass
                };
            }
        }).mount('#app');
    </script>
{% endblock %}
